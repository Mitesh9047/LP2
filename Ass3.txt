#include <iostream>
#include <vector>
#include <limits>
using namespace std;

const int INF = 9999;

class Graph {
private:
    int n;
    bool isDirected, isWeighted;
    vector<vector<int>> adjMatrix;

public:
    Graph() {
        cout << "Enter number of vertices: ";
        cin >> n;

        cout << "Is the graph directed? (1 for Yes, 0 for No): ";
        cin >> isDirected;

        cout << "Is the graph weighted? (1 for Yes, 0 for No): ";
        cin >> isWeighted;

        adjMatrix.resize(n, vector<int>(n, 0));
    }

    void readGraphByEdge() {
        int u, v, w;

        while (true) {
            cout << "Enter edge (u v w) or -1 to stop: ";
            cin >> u;
            if (u == -1) break;
            cin >> v;
            if (v == -1) break;

            w = isWeighted ? (cin >> w, w) : 1;

            adjMatrix[u][v] = w;
            if (!isDirected)
                adjMatrix[v][u] = w;
        }
    }

    void printGraph() {
        cout << "Adjacency Matrix:\n";
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                cout << adjMatrix[i][j] << " ";
            cout << endl;
        }
    }

    void prims() {
        vector<int> parent(n, -1);
        vector<int> key(n, INF);
        vector<bool> inMST(n, false);
        key[0] = 0;

        for (int count = 0; count < n - 1; ++count) {
            int u = -1, minKey = INF;

            for (int v = 0; v < n; ++v) {
                if (!inMST[v] && key[v] < minKey) {
                    minKey = key[v];
                    u = v;
                }
            }

            inMST[u] = true;

            for (int v = 0; v < n; ++v) {
                if (adjMatrix[u][v] && !inMST[v] && adjMatrix[u][v] < key[v]) {
                    key[v] = adjMatrix[u][v];
                    parent[v] = u;
                }
            }
        }

        int totalCost = 0;
        cout << "\nMinimum Spanning Tree (Prim's):\n";
        for (int v = 1; v < n; ++v) {
            cout << "Edge: " << parent[v] << " - " << v << "  Weight: " << adjMatrix[parent[v]][v] << endl;
            totalCost += adjMatrix[parent[v]][v];
        }
        cout << "Total Minimum Cost: " << totalCost << endl;
    }

    void dijkstras() {
        int src = 0;
        vector<int> dist(n, INF);
        vector<bool> visited(n, false);
        vector<int> parent(n, -1);

        dist[src] = 0;

        for (int count = 0; count < n - 1; ++count) {
            int u = -1, minDist = INF;
            for (int v = 0; v < n; ++v) {
                if (!visited[v] && dist[v] < minDist) {
                    minDist = dist[v];
                    u = v;
                }
            }

            visited[u] = true;

            for (int v = 0; v < n; ++v) {
                if (adjMatrix[u][v] && !visited[v] && dist[v] > dist[u] + adjMatrix[u][v]) {
                    dist[v] = dist[u] + adjMatrix[u][v];
                    parent[v] = u;
                }
            }
        }

        cout << "\nShortest Paths from Source (Dijkstra's):\n";
        for (int i = 0; i < n; ++i) {
            cout << "To " << i << ": Distance = " << dist[i] << "  Path: ";
            printPath(parent, i);
            cout << endl;
        }
    }

    void printPath(vector<int> &parent, int vertex) {
        if (vertex == -1) return;
        printPath(parent, parent[vertex]);
        cout << vertex << " ";
    }
};

int main() {
    Graph g;
    g.readGraphByEdge();
    g.printGraph();
    g.prims();
    g.dijkstras();
    return 0;
}
