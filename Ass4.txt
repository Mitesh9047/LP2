#include <iostream>
#include <vector>
#include <cmath>
#include <queue>

using namespace std;

struct QueensState {
    vector<int> queens;
    int row;
    int bound;

    QueensState(int n) : queens(n, -1), row(0), bound(0) {}

    QueensState(const QueensState& other) : queens(other.queens), row(other.row), bound(other.bound) {}

    bool operator>(const QueensState& other) const {
        return bound > other.bound;
    }
};

class NQueensSolver {
private:
    int n;
    vector<int> solution;
    long long nodesExplored;
    bool solutionFound;

public:
    NQueensSolver(int boardSize) : n(boardSize), nodesExplored(0), solutionFound(false) {
        solution.resize(n, -1);
    }

    bool isSafe(const vector<int>& queens, int row, int col) {
        for (int i = 0; i < row; ++i) {
            if (queens[i] == col || queens[i] - i == col - row || queens[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    

    int calculateLowerBound(const QueensState& state) {
        int conflicts = 0;
        for (int i = 0; i < state.row; ++i) {
            for (int j = i + 1; j < state.row; ++j) {
                if (state.queens[i] == state.queens[j] || abs(state.queens[i] - state.queens[j]) == abs(i - j)) {
                    conflicts++;
                }
            }
        }
        return conflicts;
    }

    void printBoard(const vector<int>& queens) {
        cout << "\nSolution Board: \n";
        cout << "+";
        for (int i = 0; i < n; ++i) {
            cout << "---+";
        }
        cout << "\n";

        for (int i = 0; i < n; ++i) {
            cout << "|";
            for (int j = 0; j < n; ++j) {
                cout << (queens[i] == j ? " Q |" : "   |");
            }
            cout << "\n+";
            for (int j = 0; j < n; ++j) {
                cout << "---+";
            }
            cout << "\n";
        }
    }

    void solveBacktracking() {
        nodesExplored = 0;
        solutionFound = false;
        vector<int> queens(n, -1);

        backtrack(queens, 0);

        cout << "Backtracking: " << (solutionFound ? "Solution found" : "No solution") ;

        if (solutionFound) {
            printBoard(solution);
        }
    }

    void backtrack(vector<int>& queens, int row) {
        if (row == n) {
            solution = queens;
            solutionFound = true;
            return;
        }

        for (int col = 0; col < n; ++col) {
            nodesExplored++;

            if (isSafe(queens, row, col)) {
                queens[row] = col;
                backtrack(queens, row + 1);
                if (solutionFound) return;
                queens[row] = -1;
            }
        }
    }

    bool solveBranchAndBound() {
        nodesExplored = 0;
        solutionFound = false;

        priority_queue<QueensState, vector<QueensState>, greater<QueensState>> pq;

        QueensState state(n);
        pq.push(state);

        while (!pq.empty() && !solutionFound) {
            QueensState current = pq.top();
            pq.pop();

            nodesExplored++;

            if (current.row == n) {
                solution = current.queens;
                solutionFound = true;
                break;
            }

            for (int col = 0; col < n; ++col) {
                if (isSafe(current.queens, current.row, col)) {
                    QueensState next = current;
                    next.queens[next.row] = col;
                    next.row++;
                    next.bound = calculateLowerBound(next);
                    pq.push(next);
                }
            }
        }
        cout << "Branch and Bound: " << (solutionFound ? "Solution found" : "No solution") ;

        if (solutionFound) {
            printBoard(solution);
            return true;
        }
        return false;
    }
    

};

int main() {
    int n;
    cout << "Enter the board size (N) for N-Queens problem: ";
    cin >> n;

    if (n <= 0) {
        cout << "Invalid board size. Please enter a positive integer.\n";
        return 1;
    }

    if (n == 2 || n == 3) {
        cout << "Warning: No solution exists for N=" << n << "\n";
    }
    NQueensSolver solver(n);
    cout << "\n=== Solving " << n << "-Queens Problem ===\n";

    solver.solveBacktracking();
    solver.solveBranchAndBound();
    return 0;
}
